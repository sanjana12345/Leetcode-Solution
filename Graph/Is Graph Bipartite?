class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
     if (!graph.size()) 
          return true;
        for (int i=0; i<graph.size(); i++) {
            int* colors = new int[graph.size()+1];
            for (int i=0; i<graph.size(); i++)
                colors[i] = -1;
            queue <int> q;
            q.push(i);
            colors[i] = 0;
            while (!q.empty()) {
                int curr_node = q.front();
                q.pop();
                for (auto neighbour : graph[curr_node]) {
                    if (colors[neighbour] == -1) {
                        colors[neighbour] = 1 - colors[curr_node];
                        q.push(neighbour);
                    }
                    else if (colors[neighbour] == colors[curr_node]) return false;
                }
            }
        }
        return true;
    }
};
